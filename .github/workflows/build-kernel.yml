name: Build example
on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      release:
        description: "Release"
        required: true
        default: false
        type: boolean

jobs:
  build:
    permissions:
      contents: write
    name: Build by ${{ github.actor }}
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
    - name: Check out
      uses: actions/checkout@v3

    - name: Read the configuration
      run: |
        CONFIG_ENV=config.properties
        echo "KERNEL_SOURCE=$(cat $CONFIG_ENV | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNEL_SOURCE_BRANCH=$(cat $CONFIG_ENV | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNEL_CONFIG=$(cat $CONFIG_ENV | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNEL_IMAGE_NAME=$(cat $CONFIG_ENV | grep -w "KERNEL_IMAGE_NAME" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ARCH=$(cat $CONFIG_ENV | grep -w "ARCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_CLANG=$(cat $CONFIG_ENV | grep -w "ENABLE_CLANG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "USE_AOSP_CLANG=$(cat $CONFIG_ENV | grep -w "USE_AOSP_CLANG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "AOSP_CLANG_SYSTEM=$(cat $CONFIG_ENV | grep -w "AOSP_CLANG_SYSTEM" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "AOSP_CLANG_BRANCH=$(cat $CONFIG_ENV | grep -w "AOSP_CLANG_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "AOSP_CLANG_VERSION=$(cat $CONFIG_ENV | grep -w "AOSP_CLANG_VERSION" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "USE_CUSTOM_CLANG=$(cat $CONFIG_ENV | grep -w "USE_CUSTOM_CLANG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_CLANG_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_CLANG_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_CLANG_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_CLANG_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "DISABLE-LTO=$(cat $CONFIG_ENV | grep -w "DISABLE-LTO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "DISABLE_CC_WERROR=$(cat $CONFIG_ENV | grep -w "DISABLE_CC_WERROR" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ADD_KPROBES_CONFIG=$(cat $CONFIG_ENV | grep -w "ADD_KPROBES_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ADD_OVERLAYFS_CONFIG=$(cat $CONFIG_ENV | grep -w "ADD_OVERLAYFS_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_CCACHE=$(cat $CONFIG_ENV | grep -w "ENABLE_CCACHE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "NEED_DTBO=$(cat $CONFIG_ENV | grep -w "NEED_DTBO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "BUILDER_HOST=$(cat $CONFIG_ENV | grep -w "BUILDER_HOST" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "TC_CUSTOM_CMDS=$(cat $CONFIG_ENV | grep -w "TC_CUSTOM_CMDS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
        echo "EXTRA_CMDS=$(cat $CONFIG_ENV | grep -w "EXTRA_CMDS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
        echo "INJECT_KSUNEXT=$(cat $CONFIG_ENV | grep -w "INJECT_KSUNEXT" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV

    - name: Setting up the kernel compilation environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d-%H%M")-UTC+8" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_CONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt update
        sudo apt install -y git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 libncurses-dev libx11-dev lib32z1-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3 rename
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace

    - name: Set Swap to 10GB
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Download AOSP Clang
      if: env.USE_AOSP_CLANG == 'true' && env.USE_CUSTOM_CLANG == 'false'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir clang
        wget https://android.googlesource.com/platform/prebuilts/clang/host/${{ env.AOSP_CLANG_SYSTEM }}/+archive/refs/heads/${{ env.AOSP_CLANG_BRANCH }}/clang-${{ env.AOSP_CLANG_VERSION }}.tar.gz
        tar -C clang/ -zxvf clang-${{ env.AOSP_CLANG_VERSION }}.tar.gz
        rm -rf clang-${{ env.AOSP_CLANG_VERSION }}.tar.gz

    - name: Download Custom Clang
      if: env.USE_AOSP_CLANG == 'false' && env.USE_CUSTOM_CLANG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [[ ${{ env.CUSTOM_CLANG_SOURCE }} =~ git ]]; then
            if [[ ${{ env.CUSTOM_CLANG_SOURCE }} == *'.tar.gz' ]]; then
                wget -O clang.tar.gz ${{ env.CUSTOM_CLANG_SOURCE }}
                mkdir clang
                tar -C clang/ -zxvf clang.tar.gz
                rm -rf clang.tar.gz
            else
                git clone ${{ env.CUSTOM_CLANG_SOURCE }} -b ${{ env.CUSTOM_CLANG_BRANCH }} clang --depth=1
            fi        
        else
            wget -O clang.zip ${{ env.CUSTOM_CLANG_SOURCE }}
            mkdir clang
            unzip clang.zip -d clang/
            rm -rf clang.zip
        fi
        
    - name: Download the kernel source code
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [[ ${{ env.KERNEL_SOURCE }} =~ git ]]; then
          if [[ ${{ env.KERNEL_SOURCE }} == *'.tar.gz' ]]; then
            wget -O android-kernel.tar.gz ${{ env.KERNEL_SOURCE }}
            mkdir android-kernel
            tar -C android-kernel/ -zxvf android-kernel.tar.gz
          else
            git clone ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1 --recurse-submodules
          fi        
        else
          wget -O android-kernel.zip ${{ env.KERNEL_SOURCE }}
          mkdir android-kernel
          unzip android-kernel.zip -d android-kernel/
        fi
        
    - name: Setting the kernel compilation configuration
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        if [ ${{ env.DISABLE-LTO }} = true ]; then
            sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_LTO_NONE=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi
        if [ ${{ env.DISABLE_CC_WERROR }} = true ]; then
            echo "CONFIG_CC_WERROR=n" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi
        if [ ${{ env.ADD_KPROBES_CONFIG }} = true ]; then
            echo "CONFIG_MODULES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi
        if [ ${{ env.ADD_OVERLAYFS_CONFIG }} = true ]; then
            echo "CONFIG_OVERLAY_FS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi
    - name: Inject KernelSU Next
      if: env.INJECT_KSUNEXT == 'true'
      run : |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -

    - name: Setup ccache
      if: env.ENABLE_CCACHE == 'true'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: build-kernel-${{ env.DEVICE }}${{ env.UPLOADNAME }}
        max-size: 2G

    - name: Build kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang/bin:$PATH
        export KBUILD_BUILD_HOST=${{ env.BUILDER_HOST }}
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
         make -j$(nproc --all) CC=clang O=out ARCH=${{ env.ARCH }} ${{ env.TC_CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.KERNEL_CONFIG }}
        if [ ${{ env.ENABLE_CCACHE }} = true ]; then
          make -j$(nproc --all) CC="ccache clang" KCFLAGS="-Wno-error -fPIC" O=out ARCH=${{ env.ARCH }} ${{ env.TC_CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }}
        else
          make -j$(nproc --all) CC=clang O=out KCFLAGS="-Wno-error -fPIC" ARCH=${{ env.ARCH }} ${{ env.TC_CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }}
         fi
    - name: Compress output
      run: | 
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        tar czfv output.tar.gz out/
  
    - name: Upload output
      if: env.CHECK_DTBO_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: output.tar.gz
        path: $GITHUB_WORKSPACE/kernel_workspace/android-kernel/output.tar.gz
        retention-days: 7  # Optional, adjust retention days if needed
        
    - name: Release
      uses: softprops/action-gh-release@master
      if: github.event.inputs.release == 'true'
      with:
        tag_name: Build-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        draft: false
        prerelease: false
        files: |
          kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }}
          kernel_workspace/AnyKernel3/AnyKernel3.zip
          kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img
          kernel_workspace/bootimg_tmp/boot-kernelsu.img
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
